Lecture_notes [1: Roadmap || 2:Lab0 || 3:Memory_Addressing || 4:Lab1 ||] 

1:Roadmap
 1:Memory & Data
 2:Integers & Floats
 3:Machine Code & C
 4:x86 Assembly
 5:Procedures & Stacks
 6:Arrays & Structs
 7:Memory & Caches
 8:Processes
  1:Figure out how to give an illusion that one process gains control over the entire processor
 9:Virtual memory  
 10:Memory allocation
 11:Java versus C
 12:Themes
  1:Representation - Numbers, Characters, Instructions, Pointers
  2:Translation - Work the way down to 0s and 1s of computers
  3:Control flow - Keep track of when we call a method, what do we do upon return

2:Lab0
 1:User => HappyUser || Password => "streetdan"
 2:Go to "CourseMaterials" folder (Everytime update course is done, new course materials are downloaded) 
 3:"submit-hw lab0" => Submission login : "sabesansp@gmail.com" || Submission Password : "<X>" listed on coursera page
 4:File to be submitted => "arrays.c"
 5:compilation => "gcc -g -Wall -std=gnu99 -o arrays arrays.c"
  1:output => Filling an array at address 0x7fff82e82ec0 with 10 values etc. 
 6:TODO(1): Replace the parameter 10 with 11 in the "fillArray" function
  1:Able to fill an array with 11 values with no problem
  2:For 100,1000 got a segmentation fault(core dumped)
 7:TODO(2): "int value" => &value is the same value in "int values[1]" 
  1:fillArray(&value,1) = fillArray(values,1) 
 8:TODO(3): What happens if "free()" call is absent
  1:20 bytes in 1 block are definitely lost in loss record 1 of 1
  2:at 0x4C2981C: malloc(vg_replace_malloc.c:270)
  3:by 0x40077E: main(arrays.c:110) 
 9:TODO(4): allocate a FourInts struct dynamically on the heap and use fillArray to populate it with values
  1:FourInts* fourInts_ptr = (FourInts*)malloc(sizeof(FourInts));
  2:fillArray((int *)fourInts_ptr,4);
  3:free(fourInts_ptr);
  4:Run "valgrind --leak-check=full ./arrays" to make sure that there are no memory leaks
 10:Received the grade for the exercise that was submitted => "Score : 10/10"

3:Memory_Addressing
 1:CPU ------Memory
   |         |
   -------BUS------
   |   |    |    |
   D   N    U    [Etc.]
 2:CPU needs to retrieve instructions, data from memory in order to know what to do and what to operate on
 3:Load data from memory into the register for processing, and then put the processed data back into memory
 4:CPU also has an instruction cache to maintain a list of "next" instructions (if it needs to go into the memory
   to fetch it or that which is already present like a loop or a common procedure that it already executed) 
 5:Key performance issue => data moved from memory to CPU
 6:Two improvements => Move more pieces of data in one move from mem->CPU and CPU->mem ||
   Put some memory in CPU chip itself, this will be "cache" memory
 7:351 => 0000000101011111 (16-bit representation) 
 8:Electronics are designed to be able to easily represent 0s and 1s
 9:[1 = (2.8V-3.3V) || 0 = (0.0V-0.5V)] || Ignore the stuff between {0.5V - 2.8V}
 10:Expand 0x0FA1D37B into binary => 0000|1111|1010|0001|1101|0011|0111|1011 {32-bit string}
 11:Byte-Oriented memory organization => OS provides an address space private to each "process" = <x> bytes
 12:32-bit machines = 32-bit address || 64-bit machines = 64-bit address
 13:Memory locations= 0x00000000 - 0xFFFFFFFF {on a 32-bit machine) 
 14:32-bit word => M_1 = 0x0000 || M_2 = 0x0004 || C[M_2] =  00|00|01|5F
 15:Pointer to an address || Pointer to a pointer
  1:C[0x0004] = 0x00|00|01|5F {points to a data value} 
  2:C[0x001C] = 0x00|00|00|04 {pointer to an address location} 
  3:C[0x0024] = 0x00|00|00|1C {pointer to a pointer}
 16:Data_Representations
  1:Java || C || 32-bit || 64-bit
  2:boolean || bool || 1 || 1
  3:byte || char || 1 || 1
  4:char ||      || 2 || 2
  5:short || short int || 2 || 2
  6:int || int || 4 || 4
  7:float || float || 4 || 4
  8:     || long int || 4 || 8 
  9:double || double || 8 || 8
  10:long || long long || 8 || 8
  11:     || long double || 8 || 16
  12:(reference) || pointer* || 4 || 8
 17:Byte ordering
  1:Big endian(PowerPC, Sun, Internet) => most significant byte has lowest address
    Ex: 0x01234567 => 01||23||45||67 [left -> right = lowest_addr -> highest_addr] 
  2:Little endian(x86) => least significant byte has lowest address
    Ex: 0x01234567 => 67||45||23||01 [lowest_addr -> highest_addr]
  3:int A = 12345; || Hex_Value = 0x00003039
   1:Little endian => {39||30||00||00} 
   2:Big endian => {00||00||30||39}
  4:int B = -12345; || Hex_Value = 0xFFFFCFC7
   1:Little endian => {C7||CF||FF||FF}
   2:Big endian => {FF||FF||CF||C7}
 18:Addresses and Pointers in C
  1:What is &(*x) equivalent to? => x
  2:x = 0x0 || y = 0x3CD02700 || int x,y; || x = y+3; || x= 0x3CD02703
  3:int *x;int y;x=&y + 3; &y = 0018 || &y+3 = 0x0024 || x = 0x0024
  4:*x=y;Content pointed to by address x = value of y || value at address 0x0024 = 0x3CD02700
 19:Arrays
  1:int big_array[128]; || allocates 512 adjacent bytes starting from 0x00ff0000
  2:int *array_ptr; array_ptr=big_array; [array_ptr = 0x00FF0000] 
  3:array_ptr = &big_array[0]; [array_ptr = 0x00FF0000] 
  4:array_ptr = &big_array[3]; [array_ptr = 0x00FF000C]
 20:Boolean_Algebra
  1:~(A|B) = ~A & ~B
  2:~(A&B) = ~A | ~B
  3:Bit vectors for manipulating sets
   1:width 'w' bit vector represents subsets of {0,...,w-1} 
   2:01111000 = {3,4,5,6}
   3:& => Intersection of two sets
   4:| => Union of two sets
   5:^ => symmetric difference 
   6:~ => complement


4: Lab1
 1:Rules for bits.c
  1:Each expression = {Integer constants 0-255,function_args + local_var,! ~,& ^ | + << >>} 
  2:bitAnd(int x, int y) || using only '~' and '|'
   1:return ~x | ~y => problem happens when both integers are negative
   2:x = -2147483648(0x80000000) || y = -2147483648(0x80000000) 
     ~x = 0x7FFFFFFF || ~y = 0x7FFFFFFF || ~x | ~y = 0x7FFFFFFF {expected_output = 0x80000000}
   3:solution = ~(~x | ~y)= complement the final result
   4:score = 1/1
  3:bitXor(int x, int y) || using only ~ &
   1:x = 4(0x00000004) || y = 5(0x00000005)
   2:x ^ y = 1(0x00000001) 
   3:possible expression = ~(~(x & ~y) & ~(~x & y))
   4:score = 1/1
  4:thirdBits(void) => no input
   1:Start with x = 0x00000000
   2:x = x << 4;
   3:x = x & 0x04;
   4: 
        
